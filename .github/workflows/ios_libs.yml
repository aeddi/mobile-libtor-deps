name: Release iOS libs
on:
  push:
    branches:
      - master
    paths:
      - 'VERSIONS'
      - '.github/workflows/ios_libs.yml'
      - '.github/workflows/scripts/configure-ios.sh'
      - '.github/workflows/scripts/openssl-build-ios'
  pull_request:
    paths:
      - 'VERSIONS'
      - '.github/workflows/ios_libs.yml'
      - '.github/workflows/scripts/configure-ios.sh'
      - '.github/workflows/scripts/openssl-build-ios'

jobs:
  build:
    name: Build static libs for iOS
    runs-on: macos-latest
    strategy:
      matrix:
        archs: ['arm64', 'arm64e', 'x86_64']
    env:
      ARCH: ${{ matrix.archs }}
    steps:
      - name: Checkout changes
        uses: actions/checkout@v2

      - name: Import lib versions in env
        run: cat VERSIONS >> $GITHUB_ENV

      - name: Setup XCode
        uses: maxim-lobanov/setup-xcode@v1.2.1
        with:
          xcode-version: latest-stable

      - name: Download sources and scripts
        run: |
          # Setup source folder
          mkdir source && cd source

          # Download OpenSSL
          cp -r ${{ github.workspace }}/.github/workflows/scripts/openssl-build-ios openssl
          (cd openssl && wget "https://www.openssl.org/source/openssl-$OPENSSL_VERSION.tar.gz")

          # Download Zlib
          wget "https://zlib.net/zlib-$ZLIB_VERSION.tar.gz" -O /tmp/zlib.tar.gz
          mkdir zlib && tar xvf /tmp/zlib.tar.gz -C zlib --strip-components=1

          # Download Libevent
          wget "https://github.com/libevent/libevent/releases/download/release-$LIBEVENT_VERSION/libevent-$LIBEVENT_VERSION.tar.gz" -O /tmp/libevent.tar.gz
          mkdir libevent && tar xvf /tmp/libevent.tar.gz -C libevent --strip-components=1

      - name: Build OpenSSL
        run: |
          # Setup build directory
          mkdir -p "build/openssl" && cp -r source/openssl "build/openssl/$ARCH" && cd "build/openssl/$ARCH"

          # Build OpenSSL
          if [[ "$ARCH" == 'arm64' || "$ARCH" == 'arm64e' ]]; then
              target="ios64-cross-$ARCH"
          elif [[ "$ARCH" == 'x86_64' ]]; then
              target="ios-sim-cross-x86_64"
          fi
          ./build-libssl.sh --targets="$target" --version="$OPENSSL_VERSION" --deprecated

          # Cleanup
          rm -rf $(ls -a1 | grep -v '^lib\|^include')

      - name: Build Zlib
        run: |
          # Setup build folder
          mkdir -p "build/zlib/$ARCH" && cp -r source/zlib "build/zlib/$ARCH/src" && cd "build/zlib/$ARCH/src"

          # Build Zlib
          CFLAGS='-O3' \
          CPPFLAGS='-O3' \
          ${{ github.workspace }}/.github/workflows/scripts/configure-ios.sh \
            "$ARCH" \
            --static \
            --prefix="$PWD/.."

          # Cleanup
          rm -rf "build/zlib/$ARCH/src"

      - name: Build Libevent
        run: |
          # Setup build folder
          mkdir -p "build/libevent/$ARCH" && cp -r source/libevent "build/libevent/$ARCH/src" && cd "build/libevent/$ARCH/src"

          # Build Libevent
          CFLAGS=-"-O3 -I${{ github.workspace }}/openssl/$ARCH/include" \
          CPPFLAGS="-O3  -I${{ github.workspace }}/openssl/$ARCH/include" \
          LDFLAGS="-L${{ github.workspace }}/openssl/$ARCH/lib" \
          ${{ github.workspace }}/.github/workflows/scripts/configure-ios.sh \
            "$ARCH" \
            --disable-shared \
            --disable-samples \
            --enable-function-sections \
            --prefix="$PWD/.."

          # Cleanup
          rm -rf "build/libevent/$ARCH/src"

      - name: Compress build directory
        if: ${{ github.event_name == 'push' && github.ref == 'master' }}
        run: tar -czvf "libs-$GITHUB_RUN_ID-$ARCH.tar.gz" build

      - name: Upload build archive
        if: ${{ github.event_name == 'push' && github.ref == 'master' }}
        uses: actions/upload-artifact@v2
        with:
          path: "libs-$GITHUB_RUN_ID-$ARCH.tar.gz"

  release:
    name: Release static libs for iOS
    needs: [build]
    if: ${{ github.event_name == 'push' && github.ref == 'master' }}
    runs-on: macos-latest
    steps:
      - name: Download arm64 build archive
      - uses: actions/download-artifact@v2
        with:
          name: "libs-$GITHUB_RUN_ID-arm64.tar.gz"

      - name: Download arm64e build archive
      - uses: actions/download-artifact@v2
        with:
          name: "libs-$GITHUB_RUN_ID-arm64e.tar.gz"

      - name: Download x86_64 build archive
      - uses: actions/download-artifact@v2
        with:
          name: "libs-$GITHUB_RUN_ID-x86_64.tar.gz"

      - name: Decompress build archives
        run: tar -xvf "libs-$GITHUB_RUN_ID-*.tar.gz"

      - name: Display builds # TODO: REMOVE THIS
        run: ls -R build
